-- write more examples, make some demo/presentation
-- details view:
   per-matchrule wakeups (<- maybe it can be seen from incoming messages)
   emphasize processes somehow (group counts by pid), ugh..
   say in details view group by pid
   details order by sent messages or something useful
-- selective dbus monitor functionality with timestamps:
   maybe decode arguments? (later)
   "i want to monitor messages like X"
-- other stats, max woken, median woken?
-- selection of clients:
   add/remove to selection?
   (transitive closure of {app and clients sending to it})
-- "future" selection: add to selection when messages come.  needs
   selection-rules; probably not worth
-- colors:
   monitor mode: color replies based on turnaround time (how long it took)
   need to track pending calls
   if we already track them, detail view can be extended to show the call
   that a reply was response for...
-- account for service activation (ListActivatableNames and check if
   a message activated a service)
-- bling: graphviz output for TPOs (connect active clients)
   tried, too messy, needs more thinking
   see with real world case
-- select clients based on their sent/received messages:
   who sent to this service?
   who received from this client?
-- think about the output, make it more machine parseable and human readable
-- should we redirect stderr to stdout?	 make them the same.
-- redirect/tee output to some file at runtime?
   or dump something to file for history
   stop/pause listening so further messages don't screw up the numbers
   save [file], first invocation needs file, subsequent ones append to last
   file.  what to write?  annotation + details?
-- command-specific completion
   by making Command object more featureful
-- profile and optimize it, split it, rewrite it :)
-- rewrite parts which are not performance critical to be more convenient
-- allow matching NOC signals without arg0
